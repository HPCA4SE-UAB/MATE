
/**************************************************************************
*                    Universitat Autonoma de Barcelona,					  *
*              HPC4SE: http://grupsderecerca.uab.cat/hpca4se/             *
*                        Analysis and Tuning Group, 					  *
*					            2002 - 2018                  			  */
/**************************************************************************
*	  See the LICENSE.md file in the base directory for more details      *
*									-- 									  *
*	This file is part of MATE.											  *	
*																		  *
*	MATE is free software: you can redistribute it and/or modify		  *
*	it under the terms of the GNU General Public License as published by  *
*	the Free Software Foundation, either version 3 of the License, or     *
*	(at your option) any later version.									  *
*																		  *
*	MATE is distributed in the hope that it will be useful,				  *
*	but WITHOUT ANY WARRANTY; without even the implied warranty of        *
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 		  *
*	GNU General Public License for more details.						  *
*																		  *
*	You should have received a copy of the GNU General Public License     *
*	along with MATE.  If not, see <http://www.gnu.org/licenses/>.         *
*																		  *
***************************************************************************/

// MATE
// Copyright (C) 2002-2008 Ania Sikora, UAB.

// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#ifndef __ECPMSG_H__
#define __ECPMSG_H__

// Local includes
#include "ECPMsgHeader.h"
#include "NetSer.h"
#include "Utils.h"

// C++ includes
#include <stdarg.h>
#include <assert.h>

namespace Common{
	/**
	 * @class ECPMessage
	 * @brief Abstract class, EventCollectorProtocol, represents message
	 * interchanged between DMLib and analyzer.
	 *
	 * @version 1.0b
	 * @since 1.0b
	 * @author Ania Sikora, 2002
	 */

	// ------------------------------------------------------------
	class ECPMessage
	{
	protected:
		/**
		 * @brief Constructor.
		 *
		 * Protected so that this base class cannot be explicitly instantiated.
		 */
		ECPMessage (){}

	public:

		/**
		 * @brief To be implemented by subclasses.
		 */
		virtual ECPMsgType GetType () const = 0;

		/**
		 * @brief Returns size of the data once serialized.
		 */
		virtual int GetDataSize () const;

		/**
		 * @brief To be implemented by subclasses.
		 */
		virtual void Serialize (Serializer & out) const = 0;

		/**
		 * @brief To be implemented by subclasses.
		 */
		virtual void DeSerialize (DeSerializer & in) = 0;
	};

	/**
	 * @class EventMsg
	 * @brief Encapsulates a message generated by DMLib to trace events.
	 *
	 * The message indicates what information should be gathered of certain
	 * event, this messages are created with an EventMsgWriter object.
	 *
	 * @extends ECPMessage
	 *
	 * @version 1.0b
	 * @since 1.0b
	 * @author Ania Sikora, 2002
	 */

	// ------------------------------------------------------------
	class EventMsg : public ECPMessage
	{
	public:
		/**
		 * @brief Constructor.
		 */
		EventMsg ()
			: _timestamp (0),
			  _eventId (-1),
			  _place (instrUnknown),
			  _paramCount (0),
			  _paramBufSize (0),
			  _paramBuffer (0)
		{}

		/**
		 * @brief Destructor.
		 */
		~EventMsg () {
			if (_paramBuffer != 0)
				delete [] _paramBuffer;
		}

		/**
		 * @brief Sets the message to the indicated state.
		 *
		 * @param timestamp Timestamp when the event occurs.
		 * @param eventId Id of the event.
		 * @param place Place where the event is located
		 * {instrUnknown, ipFuncEntry,	ipFuncExit}.
		 * @param paramCount Number of parameters.
		 */
		void Reset (long_t timestamp, int eventId, InstrPlace place,
				int paramCount);

		/**
		 * @brief Sets the task id.
		 */
		void SetTid (int tid) {
			_tid = tid;
		}

		/**
		 * @brief Returns the type of event.
		 */
		ECPMsgType GetType () const
		{
			return ECPEvent;
		}

		/**
		 * @brief Sets the buffer to be used and indicates its size.
		 */
		void SetParams (char const * buffer, int size);

		/**
		 * @brief Sets the parameters buffer.
		 */
		void SetBuffer (char * buffer);

		/**
		 * @brief Returns buffer size.
		 */
		int GetParamBufSize () const { return _paramBufSize; }

		/**
		 *  @brief Returns a pointer to the content of the buffer.
		 */
		const char * GetParamBuffer () const { return _paramBuffer; }

		/**
		 * @brief Returns timestamp.
		 */
		long_t GetTimestamp () const { return _timestamp; }

		/**
		 * @brief Returns place where the event is located
		 * {instrUnknown, ipFuncEntry,	ipFuncExit}.
		 */
		int GetPlace () const { return _place;}

		/**
		 * @brief Returns event ID.
		 */
		int GetEventId () const { return _eventId;}

		/**
		 * @brief Returns parameters count.
		 */
		int GetParamCount () const { return _paramCount;}

		/**
		 * @brief Returns size of the data serialized.
		 */
		int GetDataSize () const;

		/**
		 * @brief Serializes the message with the given Serializer.
		 */
		void Serialize (Serializer & out) const;

		/**
		 * @brief Deserializes the message with the given DeSerializer.
		 */
		void DeSerialize (DeSerializer & in);

		/**
		 * @brief Returns the task id.
		 */
		int GetTid () const { return _tid; }

	private:
		int 			_tid;
		long_t			_timestamp;
		int 			_eventId;
		InstrPlace		_place;
		int 			_paramCount;
		int				_paramBufSize;
		char const 	  * _paramBuffer;
	};

	/**
	 * @class RegisterMsg
	 * @brief Represents message that is sent when DMLib is
	 * registered with analyzer to send event messages.
	 *
	 * @extends ECPMessage
	 *
	 * @version 1.0b
	 * @since 1.0b
	 * @author Ania Sikora, 2002
	 */

	// ------------------------------------------------------------
	class RegisterMsg : public ECPMessage
	{
	public:
		/**
		 * @brief Constructor.
		 *
		 * @param pid Id of the process where the library will be registered.
		 * @param mpiRank Mpi rank.
		 * @param host Host where the process is located.
		 * @param taskName Name of the task.
		 */
		RegisterMsg (int pid = 0, int mpiRank = 0, std::string host = std::string(), std::string taskName = std::string(), int ACport=0)
			: _pid (pid), _mpiRank (mpiRank), _host (host), _taskName (taskName), _ACport(ACport)
		{}

		/**
		 * @brief Returns the type of event.
		 */
		ECPMsgType GetType () const { return ECPReg; }

		/**
		 * @brief Returns Id of the process where the library will be loaded.
		 */
		int GetPid () const { return _pid; }

		/**
		 * @brief Returns mpi rank.
		 */
		int GetMpiRank () const { return _mpiRank; }

		/**
		 * @brief Returns host name where the process is located.
		 */
		string const & GetHost () const { return _host; }

		/**
		 * @brief Returns task name.
		 */
		string const & GetTaskName () const { return _taskName; }

		/**
		 * @brief Sends the message.
		 */
		void Serialize (Serializer & out) const;

		/**
		 * @brief Receives the message.
		 */
		void DeSerialize (DeSerializer & in);

	private:
		int    		 _pid;
		int 		 _mpiRank;
		std::string _host;
		std::string _taskName;
		int _ACport;
	};

	/**
	 * @class UnRegisterMsg
	 * @brief Represents message that is sent when DMLib is
	 * unregistered with analyzer.
	 *
	 * @extends ECPMessage
	 *
	 * @version 1.0b
	 * @since 1.0b
	 * @author Ania Sikora, 2002
	 */

	// ------------------------------------------------------------
	class UnRegisterMsg : public ECPMessage
	{
	public:
		/**
		 * @brief Constructor.
		 */
		UnRegisterMsg (int pid=0) : _pid (pid) {}

		/**
		 * @brief Returns the type of event.
		 */
		ECPMsgType GetType () const { return ECPUnReg; }

		/**
		 * @brief Returns Id of the process where the library will be unregistered.
		 */
		int GetPid () const { return _pid; }

		/**
		 * @brief Sends the message.
		 */
		void Serialize (Serializer & out) const
		{
			out.PutInt (_pid);
		}

		/**
		 * @brief Receives the message.
		 */
		void DeSerialize (DeSerializer & in){
			_pid = in.GetInt ();
		}
	private:
		int _pid;
	};
}

#endif
